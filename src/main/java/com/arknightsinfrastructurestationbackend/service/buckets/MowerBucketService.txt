package com.arknightsinfrastructurestationbackend.service.buckets;

import com.arknightsinfrastructurestationbackend.common.aspect.redisLock.RedisLock;
import com.arknightsinfrastructurestationbackend.common.exception.ServiceException;
import com.arknightsinfrastructurestationbackend.common.tools.Log;
import com.obs.services.ObsClient;
import com.obs.services.exception.ObsException;
import com.obs.services.model.ObsObject;
import lombok.AllArgsConstructor;
import org.redisson.api.RedissonClient;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.core.io.InputStreamResource;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.Base64;

@Service
@AllArgsConstructor
public class MowerBucketService {
    private final String ak = System.getenv("HUAWEICLOUD_OBS_ACCESS_KEY_ID");
    private final String sk = System.getenv("HUAWEICLOUD_OBS_SECRET_ACCESS_KEY_ID");
    private final String endPoint = "https://obs.cn-north-4.myhuaweicloud.com";
    private final String bucketName = "mower";
    private final ObsClient obsClient = new ObsClient(ak, sk, endPoint);

    private final WebPKeysService webpKeysService;
    private final RedissonClient redissonClient;


    /**
     * 上传WebP文件字节流
     *
     * @param multipartFile 需要上传的文件
     * @return 生成的，用于存储的桶键
     */
    public String uploadPicture(MultipartFile multipartFile) {
        if (multipartFile.isEmpty()) {
            throw new ServiceException("图片文件为空");
        }

        String key = null;
        try {
            File tempFile = File.createTempFile("temp", multipartFile.getOriginalFilename());
            multipartFile.transferTo(tempFile);

            key = webpKeysService.addKey();
            obsClient.putObject(bucketName, key, tempFile);
            return key;
        } catch (ObsException e) {
            Log.error("putObject failed");
            // 请求失败,打印http状态码
            Log.error("HTTP Code:" + e.getResponseCode());
            // 请求失败,打印服务端错误码
            Log.error("Error Code:" + e.getErrorCode());
            // 请求失败,打印详细错误信息
            Log.error("Error Message:" + e.getErrorMessage());
            // 请求失败,打印请求id
            Log.error("Request ID:" + e.getErrorRequestId());
            Log.error("Host ID:" + e.getErrorHostId());
            if (key != null) {
                webpKeysService.deleteKey(key);
            }
        } catch (Exception e) {
            Log.error("putObject failed" + e.getMessage());
        }
        return null; //返回null代表对象存储失败
    }

    /**
     * 下载WebP文件字节流并以String格式返回
     * 原始方法，无分布式锁
     *
     * @param objectKey 要提取的桶对象的键
     * @return 桶对象字符串
     */
    private InputStreamResource downloadPicture(String objectKey) {
        try {
            ObsObject obsObject = obsClient.getObject(bucketName, objectKey);
            InputStream inputStream = obsObject.getObjectContent();
            File tempFile = File.createTempFile("obs-", objectKey);
            FileOutputStream fos = new FileOutputStream(tempFile);
            byte[] buffer = new byte[1024];
            int length;
            while ((length = inputStream.read(buffer)) != -1) {
                fos.write(buffer, 0, length);
            }
            fos.close();
            inputStream.close();

            return new InputStreamResource(new java.io.FileInputStream(tempFile));
        } catch (ObsException e) {
            Log.error("getObjectContent failed");
            Log.error("HTTP Code:" + e.getResponseCode());
            Log.error("Error Code:" + e.getErrorCode());
            Log.error("Error Message:" + e.getErrorMessage());
            Log.error("Request ID:" + e.getErrorRequestId());
            Log.error("Host ID:" + e.getErrorHostId());
        } catch (Exception e) {
            Log.error("getObjectContent failed" + e.getMessage());
        }
        return null;
    }

    /**
     * 下载WebP文件字节流并以String格式返回
     * 包装方法，配备分布式锁
     *
     * @param objectKey 要提取的桶对象的键
     * @return 桶对象字符串
     */
    @Cacheable("WebPStorage")
    @RedisLock(key = "'lock:WebPStorage:syncDownloadWebP:' + #objectKey")
    public InputStreamResource syncDownloadWebP(String objectKey) {
        return downloadPicture(objectKey);
    }

    /*
    该方法其实不需要配备@CacheEvict注解，因为该方法是服务层顺带调用的，作业在删除后前端就看不到了，
    也就不会再触发该作业的缓存键，不会出现异常显示问题，直接等待该缓存键过期就行
    这里还是标注了@CacheEvict是因为能及时释放缓存占用的内存空间
     */

    /**
     * 删除文件
     *
     * @param objectKey 要删除的桶对象的键
     */
    @CacheEvict("WebPStorage")
    public void deleteWebP(String objectKey) {
        try {
            webpKeysService.deleteKey(objectKey);
            obsClient.deleteObject(bucketName, objectKey);
            Log.error("deleteObject successfully");
        } catch (ObsException e) {
            Log.error("deleteObject failed");
            Log.error("HTTP Code:" + e.getResponseCode());
            Log.error("Error Code:" + e.getErrorCode());
            Log.error("Error Message:" + e.getErrorMessage());
            Log.error("Request ID:" + e.getErrorRequestId());
            Log.error("Host ID:" + e.getErrorHostId());
        } catch (Exception e) {
            Log.error("deleteObject failed");
        }
    }
}
